"""
 *packageName    : 
 * fileName       : 12865.평범한 배낭
 * author         : ipeac
 * date           : 2022-09-25
 * description    :
 * ===========================================================
 * DATE              AUTHOR             NOTE
 * -----------------------------------------------------------
 * 2022-09-25        ipeac       최초 생성
 """
# n: 물품의 수 ; k: 준서가 버틸 수 있는 무게
n, k = 4, 7
item_candidate = [[0, 0], [6, 13], [4, 8], [3, 6], [5, 12]]  # 들고갈 아이템의 가치 리스트 무게 | 즐거움
print("값을 저장할 배열의 행을 최대 무게 + 1, 열을 물품 개수 + 1로 두고 비교해가면서 풀이했다.")
dp = [[0] * (k + 1) for _ in range(n + 1)]
for i in range(1, n + 1):
    print("1==========================================")
    print(f"i  물품의 개수: {i}")
    w = item_candidate[i][0]
    print(f"w  아이템의 무게: {w}")
    v = item_candidate[i][1]
    print(f"v 아이템의 가치 : {v}")
    
    for j in range(1, k + 1):  # 최대 무게
        print("2==========================================")
        print(f"j (가방 무게가 j 가 최대인 경우): {j}")
        if j < w:
            print(f"가방 무게 : {j}")
            print(f"물품의 무게: {w}")
            dp[i][j] = dp[i - 1][j]  # 해당 값이 동일할 것이기에 승계받음.
        else:
            print(f"가방 무게 : {j}")
            print(f"물품의 무게: {w}")
            
            print("가방의 무게 >= 물품의 무게 경우")
            
            # 해당 상품을 넣을 것인지 말것인지 판단함.
            # max(dp[i - 1][j - w] :최대 가방무게 - 현재 물품의 무게  의 최대 효용에서  + 현재 상품의 효용,)
            # 와 dp[i-1][j] : 이전 물품을 넣었을 때의 효용
            # 둘의 효용중에서 가장 큰 값을 dp Arr 에 담는다.
            dp[i][j] = max(dp[i - 1][j - w] + v, dp[i - 1][j])
print(dp[n][k])
